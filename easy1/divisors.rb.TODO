require 'pry'

<<_
what is a divisor?
n / divisor -> no_remainder
_

def divisor?(n, divisor)
  n % divisor == 0
end

# in: positive int
# out: all possible divisor of arg: n
def brute_divisors(n)
  (1..n).select { |divisor| divisor? n, divisor }
end

def doubles_until(to, n)
  result = []
  while n <= to
    result << n
    n += n
  end
  result
end

def divisors n
  half = n / 2
  quart = half / 2

  result = [1, n]

  (2..quart).each do |div|
    if divisor? n, div
      result += doubles_until(half, div)
    end
  end
  result.uniq.sort
end

def divisors n
  brute_divisors Math.sqrt(n).to_i #.tap { |x| binding.pry}
end

def divisors_ n
  # brute_divisors Math.sqrt(n).to_i #.tap { |x| binding.pry}
  result = []
  Math.sqrt(n).to_i.downto(1) do |i|
    result << n / i
  end
  result.uniq.sort
end

# p divisors(1) == [1]
# p divisors(7) == [1, 7]
# p divisors(12) == [1, 2, 3, 4, 6, 12]
# p divisors(98) == [1, 2, 7, 14, 49, 98]
p divisors(99400891)
p divisors(99400891) == [1, 9967, 9973, 99400891] # may take a minute

#p divisors(999962000357)
